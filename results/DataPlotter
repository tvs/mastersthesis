#!/usr/bin/env ruby

require 'optparse'

OPTIONS = {
  :type => :byte,
  :output_pdf => $stdout,
  :output_cdf => $stdout,
  :file => 'mout.txt',
  :multiplier => 1
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: change_file_size [options]"

  opts.on("-f", "--file [FILE]", "Surge file to edit", "  Default: #{OPTIONS[:file]}") do |v|
    OPTIONS[:file] = v
  end

  opts.on("-p", "--pdf [FILE]", "Output file (pdf)", "  Default: STDOUT") do |f|
    OPTIONS[:output_pdf] = File.open(f, "w")
  end

  opts.on("-c","--cdf [FILE]", "Output file (cdf)", "  Default: STDOUT") do |f|
    OPTIONS[:output_cdf] = File.open(f, "w")
  end

  opts.on("-m", "--multiplier [NUM]", Integer, "Multiplier to increase file size by",
          "  Default: #{OPTIONS[:multiplier]}") do |m|
    OPTIONS[:multiplier] = m
  end
end
parser.parse!

class SurgeFile
  attr_reader :hits, :size, :group

  def initialize(hits, size, group)
    @hits = hits
    @size = size
    @group = group
  end
end

files = []
File.read(OPTIONS[:file]).each_line do |line|
  hits,size,group = line.split

  hits = hits.to_i
  size = size.to_i * OPTIONS[:multiplier]
  size = case OPTIONS[:type]
       when :byte then size
       when :kilobyte then size * 1_024
       when :megabyte then size * 1_048_576
       when :gigabyte then size * 1_073_741_824
       end
  group = group.to_i

  file = SurgeFile.new(hits, size, group)

  files << file
end
files = files.sort_by { |f| f.size }

def get_size_from_string(size)
  case size
  when /\d+B$/i  then size.to_i
  when /\d+KB$/i then size.to_i * 1_024
  when /\d+MB$/i then size.to_i * 1_048_576
  when /\d+GB$/i then size.to_i * 1_073_741_824
  end
end

total_files = files.size
total_size = files.inject(0) { |sum, f| sum + f.size }
total_requests = files.inject(0) { |sum, f| sum + f.hits }

# PDF
OPTIONS[:output_pdf].puts "Size (bytes),PDF-magnitude,PDF-queries"
sizes = ["1B", "1KB", "10KB", "100KB", "1MB", "10MB", "100MB"]
sizes.enum_for(:each_cons, 2).map do |size_l, size_r|
  left_size = get_size_from_string(size_l)
  right_size = get_size_from_string(size_r)

  $stderr.puts "Range: #{size_l}(#{left_size}) to #{size_r}(#{right_size})"
  files_between = files.select { |f| left_size <= f.size and f.size <= right_size }
  total_hits_between = files_between.inject(0) { |sum, f| sum + f.hits }
  total_num_between = files_between.size

  OPTIONS[:output_pdf].puts "#{right_size},#{total_num_between.fdiv(total_files)},#{total_hits_between.fdiv(total_requests)}"
end

#count_1b = 0
#count_1kb = 0
#count_10kb = 0
#count_100kb = 0
#count_1mb = 0
#count_10mb = 0
#files.each_with_index do |f, i|
  #if f.size < get_size_from_string("1KB")
    #count_1b += 1
  #elsif f.size < get_size_from_string("10KB")
    #count_1kb += 1
  #elsif f.size < get_size_from_string("100KB")
    #count_10kb += 1
  #elsif f.size < get_size_from_string("1MB")
    #count_100kb += 1
  #elsif f.size < get_size_from_string("10MB")
    #count_1mb += 1
  #else
    #count_10mb += 1
  #end
#end
#puts "0,#{count_1b.fdiv(total_files)}"
#puts "#{get_size_from_string("1KB")},#{count_1kb.fdiv(total_files)}"
#puts "#{get_size_from_string("10KB")},#{count_10kb.fdiv(total_files)}"
#puts "#{get_size_from_string("100KB")},#{count_100kb.fdiv(total_files)}"
#puts "#{get_size_from_string("1MB")},#{count_1mb.fdiv(total_files)}"
#puts "#{get_size_from_string("10MB")},#{count_10mb.fdiv(total_files)}"

# CDF
OPTIONS[:output_cdf].puts "File Size,CDF"
files.each_with_index do |f, i|
  OPTIONS[:output_cdf].puts "#{f.size},#{i.fdiv(total_files)}"
end

#puts total_size
